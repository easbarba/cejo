#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/cejo'

require 'gli'
require 'dry-container'

# and then, there was fire.
class App
  extend GLI::App

  program_desc 'Debian automation and services utilities.'

  version Cejo::VERSION

  subcommand_option_handling :normal
  arguments :normal

  desc 'Describe some switch here'
  switch %i[s switch]

  desc 'Describe some flag here'
  default_value 'the default'
  arg_name 'The name of the argument'
  flag %i[f flagname]

  def self.services
    container = Dry::Container.new
    container.register :folders, Cejo::Services::Folders.new
    container.register :utils, Cejo::Services::Utils.new
  end

  desc 'Front-end of system utilities, services and programs.'
  arg_name 'Describe arguments to ops here'
  command :ops do |c|
    utils = services.resolve :utils

    c.desc 'Manage System Volume'
    c.arg '[up, down, toggle]'
    c.command :volume do |volume|
      volume.action do |_, _, args|
        Cejo::Ops::Volume.new(utils, args.first).run
      end
    end

    c.desc 'Mirror user DATA partition folders to $HOME'
    c.arg '/folder/path/'
    c.command :homey do |homey|
      homey.action do |_, _, args|
        Cejo::Ops::Homey.new(args.first).run
      end
    end

    c.desc 'Mirror Lar files in $HOME.'
    c.arg '/folder/path/'
    c.command :dots do |dots|
      dots.action do |_, _, args|
        Cejo::Ops::Dots.new(utils, args.first).run
      end
    end

    c.desc 'Display System Hardware Information.'
    c.command :sysinfo do |sysinfo|
      sysinfo.action do
        Cejo::Ops::Sysinfo.new(utils).run
      end
    end

    c.desc 'Take a shot of current screen'
    c.arg '[full, partial]'
    c.command :screenshot do |screenshot|
      screenshot.action do |_, _, args|
        Cejo::Ops::Screenshot.new(utils, args.first).run
      end
    end

    c.desc 'Manage system brightness.'
    c.arg '[up down]'
    c.command :brightness do |brightness|
      brightness.action do |_, _, args|
        Cejo::Ops::Brightness.new(utils, args.first).run
      end
    end
  end

  desc 'Manage and grab media'
  arg_name 'Describe arguments to media here'
  command :media do |c|
    c.desc 'Get media pointed in url as video or audio.'
    c.arg 'url [vorbis, flac, mp3]'
    c.command :get do |get|
      get.action do |_, _, args|
        codec = args.first if args
        media = args.last if args.last
        Cejo::Media::Main.new(codec, media).run
      end
    end

    c.desc 'Play file, random media in folder or media pointed in url. (mpv)'
    c.arg '[url, /path/to/folder, /path/to/file]'
    c.command :play do |play|
      play.action do |_, _, args|
        Cejo::Media::Play.new(args.first).run
      end
    end
  end

  desc 'Install local builds of FLOSS Projects.'
  arg_name 'Name of project'
  command :projects do |build|
    build.action do |_, _, args|
      Cejo::Projects::Main.new(services, args.first).run
    end
  end

  desc 'An one-do-it-all porcelain front-end of the most used Distro Linux package managers.'
  arg_name 'Describe arguments to distro here'
  command :distro do |c|
    utils = services.resolve(:utils)
    folder = services.resolve(:folders).cejo_config
    base = Cejo::Distro::Main.new(folder, utils)

    c.desc 'Install a Package from Repositories'
    c.arg 'arguments'
    c.command :install do |install|
      install.action do |_, _, args|
        base.tap do |x|
          x.action = :install
          x.arguments = args
        end.run
      end
    end

    c.desc 'Remove One or More Installed Packages'
    c.arg 'arguments'
    c.command :remove do |remove|
      remove.action do |_, _, args|
        base.tap do |x|
          x.action = :remove
          x.arguments = args
        end.run
      end
    end

    c.desc 'Find a Package'
    c.arg 'arguments'
    c.command :search do |search|
      search.action do |_, _, args|
        base.tap do |x|
          x.action = :search
          x.arguments = args
        end.run
      end
    end

    c.desc 'Update Package Lists'
    c.command :update do |update|
      update.action do
        base.tap do |x|
          x.action = :update
        end.run
      end
    end

    c.desc 'Upgrade Installed Packages'
    c.command :upgrade do |upgrade|
      upgrade.action do
        base.tap do |x|
          x.action = :upgrade
        end.run
      end
    end

    c.desc 'Clean system residual packages dependencies'
    c.arg 'arguments'
    c.command :clean do |clean|
      clean.action do |_, _, args|
        base.tap do |x|
          x.action = :clean
          x.arguments = args
        end.run
      end
    end

    c.desc 'Download package binary'
    c.arg 'arguments'
    c.command :download do |download|
      download.action do |_, _, args|
        base.tap do |x|
          x.action = :download
          x.arguments = args
        end.run
      end
    end

    c.desc 'List installed packages'
    c.arg 'arguments'
    c.command :installed do |installed|
      installed.action do |_, _, args|
        base.tap do |x|
          x.action = :installed
          x.arguments = args
        end.run
      end
    end

    c.desc 'View Info About a Specific Package'
    c.arg 'arguments'
    c.command :info do |info|
      info.action do |_, _, args|
        base.tap do |x|
          x.action = :info
          x.arguments = args
        end.run
      end
    end

    c.desc 'Fix system issues'
    c.arg 'arguments'
    c.command :fix do |fix|
      fix.action do |_, _, args|
        base.tap do |x|
          x.action = :fix
          x.arguments = args
        end.run
      end
    end
  end

  desc 'Grab Floss Projects Repositories source'
  arg_name 'Describe arguments to floss here'
  command :floss do |c|
    utils = services.resolve(:utils)
    folders = services.resolve(:folders)

    c.desc 'Archive FLOSS Projects'
    c.command :archive do |archive|
      archive.action do
        Cejo::Floss::Main.new(folders, utils, :archive).run
      end
    end

    c.desc 'Grab FLOSS Projects'
    c.command :grab do |grab|
      grab.action do
        Cejo::Floss::Main.new(folders, utils, :grab).run
      end
    end
  end

  # pre do |global, command, options, args|
  #   # Pre logic here
  #   # Return true to proceed; false to abort and not call the
  #   # chosen command
  #   # Use skips_pre before a command to skip this block
  #   # on that command only
  #   true
  # end

  # post do |global, command, options, args|
  #   # Post logic here
  #   # Use skips_post before a command to skip this
  #   # block on that command only
  # end

  # on_error do |exception|
  #   # Error logic here
  #   # return false to skip default error handling
  #   true
  # end
end

exit App.run(ARGV)
